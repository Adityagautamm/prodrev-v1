{"ast":null,"code":"import axios from 'axios'; // to access store in a non component\n\nlet store;\nexport const injectStore = _store => {\n  store = _store;\n};\nexport const API = axios.create({\n  baseURL: 'http://localhost:5000',\n  withCredentials: true,\n  credentials: 'include'\n});\nAPI.interceptors.request.use(req => {\n  try {\n    console.log('token at interceptor:' + store.getState().auth.token);\n    let token = store.getState().auth.token || 'token';\n    req.headers.Authorization = `Bearer ${store.getState().auth.token}`;\n    return req;\n  } catch (error) {\n    console.log('request interceptor error');\n  }\n});\nAPI.interceptors.response.use(response => response, async error => {\n  try {\n    var _error$response;\n\n    console.log('at response interceptor');\n    const prevRequest = error === null || error === void 0 ? void 0 : error.config;\n\n    if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 403 && !(prevRequest === null || prevRequest === void 0 ? void 0 : prevRequest.sent)) {\n      prevRequest.sent = true; // add method below to call API to get new access token and save it in state- may be use useRfresh hook to do that\n\n      const newAccessToken = await refresh();\n      store.replaceAccessToken(newAccessToken);\n      prevRequest.headers['Authorization'] = `Bearer ${newAccessToken}`; //   return axiosPrivate(prevRequest);\n    } // return Promise.reject(error);\n\n  } catch (error) {\n    console.log('response interceptor error:' + error);\n  }\n});\n\nconst refresh = async () => {\n  const response = await API.get('/refresh', {\n    withCredentials: true\n  }); //saving the new access token in state\n  // setAuth(prev => {\n  //     console.log(JSON.stringify(prev));\n  //     console.log(response.data.accessToken);\n  //     return { ...prev, accessToken: response.data.accessToken }\n  // });\n\n  return response.data.accessToken;\n}; // API.interceptors.request.use((req) => {\n//     if (localStorage.getItem('profile')) {\n//         req.headers.Authorization = `Bearer ${JSON.parse(localStorage.getItem('profile')).token}`;\n//     }\n//     return req;\n// });\n// export const fetchPost = (id) => API.get(`/posts/${id}`);\n// export const fetchPosts = (page) => API.get(`/posts?page=${page}`);\n// export const fetchPostsBySearch = (searchQuery) => API.get(`/posts/search?searchQuery=${searchQuery.search || 'none'}&tags=${searchQuery.tags}`);\n// export const createPost = (newPost) => API.post('/posts', newPost);\n// export const likePost = (id) => API.patch(`/posts/${id}/likePost`);\n// export const updatePost = (id, updatedPost) => API.patch(`/posts/${id}`, updatedPost);\n// export const deletePost = (id) => API.delete(`/posts/${id}`);\n\n\nexport const signIn = formData => API.post('/user/signin', formData);\nexport const signUp = formData => API.post('/user/signup', formData);","map":{"version":3,"names":["axios","store","injectStore","_store","API","create","baseURL","withCredentials","credentials","interceptors","request","use","req","console","log","getState","auth","token","headers","Authorization","error","response","prevRequest","config","status","sent","newAccessToken","refresh","replaceAccessToken","get","data","accessToken","signIn","formData","post","signUp"],"sources":["C:/Users/Aditya Gautam/Desktop/curious fella/web development/React Projects/ProductReview-V1/client/src/api/index.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// to access store in a non component\r\nlet store\r\n\r\nexport const injectStore = _store => {\r\n    store = _store\r\n}\r\n\r\nexport const API = axios.create({ baseURL: 'http://localhost:5000', withCredentials: true, credentials: 'include' });\r\n\r\n\r\n\r\nAPI.interceptors.request.use((req) => {\r\n    try {\r\n        console.log('token at interceptor:' + store.getState().auth.token)\r\n        let token = store.getState().auth.token || 'token'\r\n        req.headers.Authorization = `Bearer ${store.getState().auth.token}`;\r\n\r\n        return req;\r\n    } catch (error) {\r\n        console.log('request interceptor error')\r\n    }\r\n});\r\n\r\n\r\nAPI.interceptors.response.use(\r\n\r\n    response => response,\r\n    async (error) => {\r\n        try {\r\n            console.log('at response interceptor')\r\n            const prevRequest = error?.config;\r\n            if (error?.response?.status === 403 && !prevRequest?.sent) {\r\n                prevRequest.sent = true;\r\n                // add method below to call API to get new access token and save it in state- may be use useRfresh hook to do that\r\n                const newAccessToken = await refresh();\r\n                store.replaceAccessToken(newAccessToken);\r\n                prevRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\r\n                //   return axiosPrivate(prevRequest);\r\n            }\r\n            // return Promise.reject(error);\r\n\r\n        } catch (error) {\r\n            console.log('response interceptor error:' + error);\r\n        }\r\n    }\r\n);\r\n\r\n\r\nconst refresh = async () => {\r\n    const response = await API.get('/refresh', {\r\n        withCredentials: true\r\n    });\r\n    //saving the new access token in state\r\n    // setAuth(prev => {\r\n    //     console.log(JSON.stringify(prev));\r\n    //     console.log(response.data.accessToken);\r\n    //     return { ...prev, accessToken: response.data.accessToken }\r\n    // });\r\n    return response.data.accessToken;\r\n}\r\n// API.interceptors.request.use((req) => {\r\n//     if (localStorage.getItem('profile')) {\r\n//         req.headers.Authorization = `Bearer ${JSON.parse(localStorage.getItem('profile')).token}`;\r\n//     }\r\n\r\n//     return req;\r\n// });\r\n\r\n\r\n// export const fetchPost = (id) => API.get(`/posts/${id}`);\r\n// export const fetchPosts = (page) => API.get(`/posts?page=${page}`);\r\n// export const fetchPostsBySearch = (searchQuery) => API.get(`/posts/search?searchQuery=${searchQuery.search || 'none'}&tags=${searchQuery.tags}`);\r\n// export const createPost = (newPost) => API.post('/posts', newPost);\r\n// export const likePost = (id) => API.patch(`/posts/${id}/likePost`);\r\n// export const updatePost = (id, updatedPost) => API.patch(`/posts/${id}`, updatedPost);\r\n// export const deletePost = (id) => API.delete(`/posts/${id}`);\r\n\r\nexport const signIn = (formData) => API.post('/user/signin', formData);\r\nexport const signUp = (formData) => API.post('/user/signup', formData);"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,IAAIC,KAAJ;AAEA,OAAO,MAAMC,WAAW,GAAGC,MAAM,IAAI;EACjCF,KAAK,GAAGE,MAAR;AACH,CAFM;AAIP,OAAO,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAa;EAAEC,OAAO,EAAE,uBAAX;EAAoCC,eAAe,EAAE,IAArD;EAA2DC,WAAW,EAAE;AAAxE,CAAb,CAAZ;AAIPJ,GAAG,CAACK,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA8BC,GAAD,IAAS;EAClC,IAAI;IACAC,OAAO,CAACC,GAAR,CAAY,0BAA0Bb,KAAK,CAACc,QAAN,GAAiBC,IAAjB,CAAsBC,KAA5D;IACA,IAAIA,KAAK,GAAGhB,KAAK,CAACc,QAAN,GAAiBC,IAAjB,CAAsBC,KAAtB,IAA+B,OAA3C;IACAL,GAAG,CAACM,OAAJ,CAAYC,aAAZ,GAA6B,UAASlB,KAAK,CAACc,QAAN,GAAiBC,IAAjB,CAAsBC,KAAM,EAAlE;IAEA,OAAOL,GAAP;EACH,CAND,CAME,OAAOQ,KAAP,EAAc;IACZP,OAAO,CAACC,GAAR,CAAY,2BAAZ;EACH;AACJ,CAVD;AAaAV,GAAG,CAACK,YAAJ,CAAiBY,QAAjB,CAA0BV,GAA1B,CAEIU,QAAQ,IAAIA,QAFhB,EAGI,MAAOD,KAAP,IAAiB;EACb,IAAI;IAAA;;IACAP,OAAO,CAACC,GAAR,CAAY,yBAAZ;IACA,MAAMQ,WAAW,GAAGF,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEG,MAA3B;;IACA,IAAI,CAAAH,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAEC,QAAP,oEAAiBG,MAAjB,MAA4B,GAA5B,IAAmC,EAACF,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEG,IAAd,CAAvC,EAA2D;MACvDH,WAAW,CAACG,IAAZ,GAAmB,IAAnB,CADuD,CAEvD;;MACA,MAAMC,cAAc,GAAG,MAAMC,OAAO,EAApC;MACA1B,KAAK,CAAC2B,kBAAN,CAAyBF,cAAzB;MACAJ,WAAW,CAACJ,OAAZ,CAAoB,eAApB,IAAwC,UAASQ,cAAe,EAAhE,CALuD,CAMvD;IACH,CAVD,CAWA;;EAEH,CAbD,CAaE,OAAON,KAAP,EAAc;IACZP,OAAO,CAACC,GAAR,CAAY,gCAAgCM,KAA5C;EACH;AACJ,CApBL;;AAwBA,MAAMO,OAAO,GAAG,YAAY;EACxB,MAAMN,QAAQ,GAAG,MAAMjB,GAAG,CAACyB,GAAJ,CAAQ,UAAR,EAAoB;IACvCtB,eAAe,EAAE;EADsB,CAApB,CAAvB,CADwB,CAIxB;EACA;EACA;EACA;EACA;EACA;;EACA,OAAOc,QAAQ,CAACS,IAAT,CAAcC,WAArB;AACH,CAXD,C,CAYA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMC,MAAM,GAAIC,QAAD,IAAc7B,GAAG,CAAC8B,IAAJ,CAAS,cAAT,EAAyBD,QAAzB,CAA7B;AACP,OAAO,MAAME,MAAM,GAAIF,QAAD,IAAc7B,GAAG,CAAC8B,IAAJ,CAAS,cAAT,EAAyBD,QAAzB,CAA7B"},"metadata":{},"sourceType":"module"}