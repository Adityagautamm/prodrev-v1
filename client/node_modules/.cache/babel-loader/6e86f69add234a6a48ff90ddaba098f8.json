{"ast":null,"code":"import axios from 'axios';\nimport { getToken } from \"./authSlice\";\nexport const API = axios.create({\n  baseURL: 'http://localhost:5000',\n  withCredentials: true,\n  credentials: 'include'\n});\nconst token = useSelector(getToken);\nAPI.interceptors.request.use(req => {\n  console.log('request interceptor:' + `Bearer ${token}`);\n  req.headers.Authorization = `Bearer ${token}` || 'no token in state';\n  return req;\n});\nAPI.interceptors.response.use(response => response, async error => {\n  var _error$response;\n\n  const prevRequest = error === null || error === void 0 ? void 0 : error.config;\n\n  if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 403 && !(prevRequest === null || prevRequest === void 0 ? void 0 : prevRequest.sent)) {\n    prevRequest.sent = true; // add method below to call API to get new access token and save it in state- may be use useRfresh hook to do that\n\n    const newAccessToken = await refresh();\n    prevRequest.headers['Authorization'] = `Bearer ${newAccessToken}`; //   return axiosPrivate(prevRequest);\n  } // return Promise.reject(error);\n\n});\n\nconst refresh = async () => {\n  const response = await API.get('/refresh', {\n    withCredentials: true\n  }); //saving the new access token in state\n  // setAuth(prev => {\n  //     console.log(JSON.stringify(prev));\n  //     console.log(response.data.accessToken);\n  //     return { ...prev, accessToken: response.data.accessToken }\n  // });\n  // return response.data.accessToken;\n}; // API.interceptors.request.use((req) => {\n//     if (localStorage.getItem('profile')) {\n//         req.headers.Authorization = `Bearer ${JSON.parse(localStorage.getItem('profile')).token}`;\n//     }\n//     return req;\n// });\n// export const fetchPost = (id) => API.get(`/posts/${id}`);\n// export const fetchPosts = (page) => API.get(`/posts?page=${page}`);\n// export const fetchPostsBySearch = (searchQuery) => API.get(`/posts/search?searchQuery=${searchQuery.search || 'none'}&tags=${searchQuery.tags}`);\n// export const createPost = (newPost) => API.post('/posts', newPost);\n// export const likePost = (id) => API.patch(`/posts/${id}/likePost`);\n// export const updatePost = (id, updatedPost) => API.patch(`/posts/${id}`, updatedPost);\n// export const deletePost = (id) => API.delete(`/posts/${id}`);\n\n\nexport const signIn = formData => API.post('/user/signin', formData);\nexport const signUp = formData => API.post('/user/signup', formData);","map":{"version":3,"names":["axios","getToken","API","create","baseURL","withCredentials","credentials","token","useSelector","interceptors","request","use","req","console","log","headers","Authorization","response","error","prevRequest","config","status","sent","newAccessToken","refresh","get","signIn","formData","post","signUp"],"sources":["C:/Users/Aditya Gautam/Desktop/curious fella/web development/React Projects/ProductReview-V1/client/src/api/index.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getToken } from \"./authSlice\";\r\n\r\nexport const API = axios.create({ baseURL: 'http://localhost:5000', withCredentials: true, credentials: 'include' });\r\nconst token = useSelector(getToken);\r\n\r\n\r\nAPI.interceptors.request.use((req) => {\r\n\r\n    console.log('request interceptor:' + `Bearer ${token}`);\r\n    req.headers.Authorization = `Bearer ${token}` || 'no token in state';\r\n\r\n    return req;\r\n});\r\n\r\n\r\nAPI.interceptors.response.use(\r\n    response => response,\r\n    async (error) => {\r\n        const prevRequest = error?.config;\r\n        if (error?.response?.status === 403 && !prevRequest?.sent) {\r\n            prevRequest.sent = true;\r\n            // add method below to call API to get new access token and save it in state- may be use useRfresh hook to do that\r\n            const newAccessToken = await refresh();\r\n            prevRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\r\n            //   return axiosPrivate(prevRequest);\r\n        }\r\n        // return Promise.reject(error);\r\n    }\r\n);\r\n\r\n\r\nconst refresh = async () => {\r\n    const response = await API.get('/refresh', {\r\n        withCredentials: true\r\n    });\r\n    //saving the new access token in state\r\n    // setAuth(prev => {\r\n    //     console.log(JSON.stringify(prev));\r\n    //     console.log(response.data.accessToken);\r\n    //     return { ...prev, accessToken: response.data.accessToken }\r\n    // });\r\n    // return response.data.accessToken;\r\n}\r\n// API.interceptors.request.use((req) => {\r\n//     if (localStorage.getItem('profile')) {\r\n//         req.headers.Authorization = `Bearer ${JSON.parse(localStorage.getItem('profile')).token}`;\r\n//     }\r\n\r\n//     return req;\r\n// });\r\n\r\n\r\n// export const fetchPost = (id) => API.get(`/posts/${id}`);\r\n// export const fetchPosts = (page) => API.get(`/posts?page=${page}`);\r\n// export const fetchPostsBySearch = (searchQuery) => API.get(`/posts/search?searchQuery=${searchQuery.search || 'none'}&tags=${searchQuery.tags}`);\r\n// export const createPost = (newPost) => API.post('/posts', newPost);\r\n// export const likePost = (id) => API.patch(`/posts/${id}/likePost`);\r\n// export const updatePost = (id, updatedPost) => API.patch(`/posts/${id}`, updatedPost);\r\n// export const deletePost = (id) => API.delete(`/posts/${id}`);\r\n\r\nexport const signIn = (formData) => API.post('/user/signin', formData);\r\nexport const signUp = (formData) => API.post('/user/signup', formData);"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAO,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAN,CAAa;EAAEC,OAAO,EAAE,uBAAX;EAAoCC,eAAe,EAAE,IAArD;EAA2DC,WAAW,EAAE;AAAxE,CAAb,CAAZ;AACP,MAAMC,KAAK,GAAGC,WAAW,CAACP,QAAD,CAAzB;AAGAC,GAAG,CAACO,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA8BC,GAAD,IAAS;EAElCC,OAAO,CAACC,GAAR,CAAY,yBAA0B,UAASP,KAAM,EAArD;EACAK,GAAG,CAACG,OAAJ,CAAYC,aAAZ,GAA6B,UAAST,KAAM,EAAhB,IAAqB,mBAAjD;EAEA,OAAOK,GAAP;AACH,CAND;AASAV,GAAG,CAACO,YAAJ,CAAiBQ,QAAjB,CAA0BN,GAA1B,CACIM,QAAQ,IAAIA,QADhB,EAEI,MAAOC,KAAP,IAAiB;EAAA;;EACb,MAAMC,WAAW,GAAGD,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEE,MAA3B;;EACA,IAAI,CAAAF,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAED,QAAP,oEAAiBI,MAAjB,MAA4B,GAA5B,IAAmC,EAACF,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEG,IAAd,CAAvC,EAA2D;IACvDH,WAAW,CAACG,IAAZ,GAAmB,IAAnB,CADuD,CAEvD;;IACA,MAAMC,cAAc,GAAG,MAAMC,OAAO,EAApC;IACAL,WAAW,CAACJ,OAAZ,CAAoB,eAApB,IAAwC,UAASQ,cAAe,EAAhE,CAJuD,CAKvD;EACH,CARY,CASb;;AACH,CAZL;;AAgBA,MAAMC,OAAO,GAAG,YAAY;EACxB,MAAMP,QAAQ,GAAG,MAAMf,GAAG,CAACuB,GAAJ,CAAQ,UAAR,EAAoB;IACvCpB,eAAe,EAAE;EADsB,CAApB,CAAvB,CADwB,CAIxB;EACA;EACA;EACA;EACA;EACA;EACA;AACH,CAXD,C,CAYA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMqB,MAAM,GAAIC,QAAD,IAAczB,GAAG,CAAC0B,IAAJ,CAAS,cAAT,EAAyBD,QAAzB,CAA7B;AACP,OAAO,MAAME,MAAM,GAAIF,QAAD,IAAczB,GAAG,CAAC0B,IAAJ,CAAS,cAAT,EAAyBD,QAAzB,CAA7B"},"metadata":{},"sourceType":"module"}